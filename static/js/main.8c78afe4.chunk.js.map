{"version":3,"sources":["SeasonsDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","winter","text","iconName","summer","SeasonsDisplay","props","season","getSeason","lat","month","Date","getMonth","React","createElement","className","Spinner","message","defaultProps","App","Component","constructor","super","arguments","this","state","errorMessage","componentDidMount","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","renderContent","render","ReactDOM","document","querySelector"],"mappings":"8LAGA,MAAMA,EAAe,CACjBC,OAAQ,CACJC,KAAM,sBACNC,SAAU,aAGdC,OAAQ,CACJF,KAAM,sBACNC,SAAU,QA8BHE,MAlBSC,IAEpB,MAAMC,EAVQC,EAACC,EAAKC,IAChBA,EAAQ,GAAKA,EAAQ,EACdD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,SAMjBD,CAAWF,EAAMG,KAAK,IAAIE,MAAOC,aAK1CV,KAACA,EAAIC,SAAEA,GAAYH,EAAaO,GAEtC,OACIM,IAAAC,cAAA,OAAKC,6BAA8BR,KAC/BM,IAAAC,cAAA,KAAGC,+BAAgCZ,WACnCU,IAAAC,cAAA,UAAKZ,GACLW,IAAAC,cAAA,KAAGC,gCAAiCZ,aClChD,MAAMa,EAAWV,GAGTO,IAAAC,cAAA,OAAKC,UAAU,oBACXF,IAAAC,cAAA,OAAKC,UAAU,kBAAkBT,EAAMW,UAKnDD,EAAQE,aAAe,CACnBD,QAAQ,cAGGD,QCIf,MAAMG,UAAYN,IAAMO,UAAUC,cAAAC,SAAAC,WAAAC,KAE1BC,MAAQ,CAAChB,IAAK,KAAMiB,aAAc,IAGlCC,oBACIC,OAAOC,UAAUC,YAAYC,mBACzBC,GAEIR,KAAKS,SAAS,CAAExB,IAAKuB,EAASE,OAAOC,WACzCC,GACIZ,KAAKS,SAAS,CAAEP,aAAcU,EAAInB,WAIlDoB,gBACI,OAAIb,KAAKC,MAAMhB,MAAQe,KAAKC,MAAMC,aACvBb,IAAAC,cAACT,EAAc,CAACI,IAAKe,KAAKC,MAAMhB,MAGvCe,KAAKC,MAAMC,eAAiBF,KAAKC,MAAMhB,IAChCI,IAAAC,cAAA,WAAK,UAAQU,KAAKC,MAAMC,cAG5Bb,IAAAC,cAACE,EAAO,CAACC,QAAQ,mCAK5BqB,SACI,OACIzB,IAAAC,cAAA,OAAKC,UAAU,cAAcS,KAAKa,kBAK9CE,IAASD,OAAOzB,IAAAC,cAACK,EAAG,MAAKqB,SAASC,cAAc","file":"static/js/main.8c78afe4.chunk.js","sourcesContent":["import './SeasonsDisplay.css'\nimport React from 'react';\n\nconst seasonConfig = {\n    winter: {\n        text: \"Burr, It's Chilling\",\n        iconName: 'snowflake'\n    },\n\n    summer: {\n        text: \"Let's hit the beach\",\n        iconName: 'sun'\n    }\n}\n\nconst getSeason = (lat, month) => {\n    if (month > 2 && month < 9) {\n        return lat > 0 ? 'winter' : 'summer'\n    } else {\n        return lat > 0 ? 'summer' : 'winter'\n    }\n}\n\nconst SeasonsDisplay = (props) => {\n\n    const season = getSeason (props.lat, new Date().getMonth());\n    // const text = season === 'winter' ? \"Burr, It's Chilling\" : \"Let's hit the beach\";\n    // const iconName = season === 'winter' ? 'snowflake' : 'sun' ;\n    // console.log(season);\n    // console.log(seasonConfig);\n    const {text, iconName} = seasonConfig[season];\n    \n    return (\n        <div className={`seasons-display ${season}`}>\n            <i className={`icon-left massive ${iconName} icon`} />\n            <h1>{text}</h1>\n            <i className={`icon-right massive ${iconName} icon`} />\n        </div>\n    );\n};\n\nexport default SeasonsDisplay;","import React from 'react';\n\nconst Spinner = (props) => {\n    \n    return (\n        <div className=\"ui active dimmer\">\n            <div className=\"ui text loader\">{props.message}</div>\n        </div>\n    );\n};\n\nSpinner.defaultProps = {\n    message:\"Loading...\"\n};\n\nexport default Spinner;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonsDisplay from './SeasonsDisplay';\nimport Spinner from './Spinner';\n\n// const App = () => {\n\n//     window.navigator.geolocation.getCurrentPosition(\n//         position => console.log(position),\n//         err => console.log(err)\n        \n//     );\n//     return (\n//         <div>\n//             Latitude:\n//         </div>\n//     );\n// };\n\nclass App extends React.Component {\n\n        state = {lat: null, errorMessage: ''\n        };\n\n        componentDidMount() {\n            window.navigator.geolocation.getCurrentPosition (\n                position =>\n                    // Called setState to update\n                    this.setState({ lat: position.coords.latitude }),\n                err =>\n                    this.setState({ errorMessage: err.message })\n            );\n        }\n\n    renderContent() {\n        if (this.state.lat && !this.state.errorMessage) {\n            return <SeasonsDisplay lat={this.state.lat} />\n        }\n        \n        if (this.state.errorMessage && !this.state.lat) {\n            return <div>Error: {this.state.errorMessage}</div>;\n        }\n\n        return <Spinner message=\"Please accept location request\" />\n    }\n\n        \n    // React says we have to define render\n    render() {\n        return (\n            <div className=\"border red\">{this.renderContent()}</div>\n        )\n    }\n}\n\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}